name: Release

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+-*"

jobs:
  validate-version:
    name: Validate Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get tag version
        id: get-version
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$TAG_VERSION" >> $GITHUB_OUTPUT
          echo "Tag version: $TAG_VERSION"

      - name: Get Cargo.toml version
        id: cargo-version
        run: |
          CARGO_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          echo "cargo-version=$CARGO_VERSION" >> $GITHUB_OUTPUT
          echo "Cargo.toml version: $CARGO_VERSION"

      - name: Validate versions match
        run: |
          TAG_VERSION="${{ steps.get-version.outputs.version }}"
          CARGO_VERSION="${{ steps.cargo-version.outputs.cargo-version }}"

          # Extract base version (before any pre-release identifier)
          TAG_BASE_VERSION=$(echo "$TAG_VERSION" | sed 's/-.*$//')
          CARGO_BASE_VERSION=$(echo "$CARGO_VERSION" | sed 's/-.*$//')

          if [ "$TAG_BASE_VERSION" != "$CARGO_BASE_VERSION" ]; then
            echo "❌ Version mismatch!"
            echo "Tag version: $TAG_VERSION (base: $TAG_BASE_VERSION)"
            echo "Cargo.toml version: $CARGO_VERSION (base: $CARGO_BASE_VERSION)"
            echo "Please ensure the base version in the tag matches Cargo.toml"
            exit 1
          else
            echo "✅ Base versions match: $TAG_BASE_VERSION"
            echo "Tag version: $TAG_VERSION"
            echo "Cargo.toml version: $CARGO_VERSION"
          fi

  test:
    name: Run Tests
    needs: validate-version
    uses: ./.github/workflows/test-reusable.yml

  security:
    name: Security Audit
    needs: validate-version
    uses: ./.github/workflows/security-reusable.yml

  build:
    name: Build Release Binaries
    runs-on: ${{ matrix.os }}
    needs: [validate-version, test, security]
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: avocado
            asset_name: avocado-linux-x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: avocado
            asset_name: avocado-linux-x86_64-musl
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: avocado.exe
            asset_name: avocado-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: avocado
            asset_name: avocado-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: avocado
            asset_name: avocado-macos-aarch64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install musl tools (Linux musl only)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: sudo apt-get update && sudo apt-get install -y musl-tools

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: release-${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Strip binary (Unix only)
        if: matrix.os != 'windows-latest'
        run: strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

  create-release:
    permissions:
      contents: write
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-version, build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v5

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.validate-version.outputs.version }}
          name: Release ${{ needs.validate-version.outputs.version }}
          draft: false
          prerelease: ${{ contains(needs.validate-version.outputs.version, '-') }}
          generate_release_notes: true
          files: |
            avocado-linux-x86_64/avocado
            avocado-linux-x86_64-musl/avocado
            avocado-windows-x86_64.exe/avocado.exe
            avocado-macos-x86_64/avocado
            avocado-macos-aarch64/avocado
